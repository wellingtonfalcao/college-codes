# -*- coding: utf-8 -*-
"""RegressãoLinear-31072025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FLStroR9vBzMBfPy8aZcw31fX1tX3rr_
"""

# Importa as bibliotecas necessárias
import pandas as pd                  # Manipulação de dados
import numpy as np                   # Operações numéricas
import matplotlib.pyplot as plt      # Visualização de dados
from sklearn.model_selection import train_test_split  # Separar dados em treino e teste
from sklearn.linear_model import LinearRegression      # Modelo de regressão linear
from sklearn.metrics import r2_score                  # Avaliação do modelo (coeficiente de determinação R²)

# Carrega os dados a partir de um arquivo CSV hospedado no GitHub
url = "https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv"
data = pd.read_csv(url)

# Separa as variáveis independentes (X) e dependentes (y)
X = data[['Hours']].values   # Coluna de horas de estudo (variável preditora)
y = data['Scores'].values    # Coluna de notas (variável alvo)

# Divide os dados em conjuntos de treino e teste (80% treino, 20% teste)
# random_state garante reprodutibilidade dos resultados
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Cria e treina o modelo de regressão linear com os dados de treino
reg = LinearRegression()
reg.fit(X_train, y_train)

# Realiza predições com os dados de teste
y_pred = reg.predict(X_test)

# Recupera os coeficientes da equação da reta (y = mx + b)
m = reg.coef_[0]        # Inclinação (coeficiente angular)
b = reg.intercept_      # Intercepto (onde a linha cruza o eixo y)

# Exibe a equação da reta ajustada pelo modelo
print(f"Equação da reta: y = {m:.2f}x + {b:.2f}")

# Plota os dados reais e a linha de regressão
plt.scatter(X, y, color='blue', label='Dados reais')        # Pontos do conjunto de dados
plt.plot(X, reg.predict(X), color='red', label='Linha de regressão')  # Linha ajustada
plt.xlabel('Horas de Estudo')
plt.ylabel('Pontuação')
plt.title('Relação entre Horas de Estudo e Nota')
plt.legend()
plt.grid(True)
plt.show()

# Calcula o R² (coeficiente de determinação), que mede a performance do modelo
r2 = r2_score(y_test, y_pred)
print(f"R² Score: {r2:.2f}")